// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountTypes {
  BUSINESS
  CUSTOMER
  ADMIN
  SUB_1
  SUB_2
}

enum AccountStatuses {
  ACTIVE
  INACTIVE
}

enum StockIndicator {
  LOW
  NORMAL
  HIGH
}

enum OrderStatuses {
  PREPARING
  DISPATCHED
  DELIVERED
}

model Account {
  id          String          @id @default(uuid())
  email       String          @db.VarChar(100)
  status      AccountStatuses @default(INACTIVE)
  accountType AccountTypes?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Profile     Profile?
  cart        Cart[]
  Orders      Orders[]
  OrderStatus OrderStatus[]

  @@map("account")
}

model Profile {
  id         String   @id @default(uuid())
  firstname  String   @db.VarChar(100)
  lastname   String   @db.VarChar(100)
  middlename String?  @db.VarChar(100)
  address    String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @unique

  @@map("profile")
}

model Products {
  id String @id @default(uuid())

  name    String   @db.VarChar(100)
  code    String   @db.VarChar(100)
  size    String?  @db.VarChar(100)
  price   Decimal  @db.Decimal(9, 2)
  content Decimal? @db.Decimal(9, 2)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Inventory Inventory[]

  @@map("products")
}

model Inventory {
  id String @id @default(uuid())

  stock          Int
  stockIndicator StockIndicator @default(NORMAL)
  expiration     String?        @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   Products?    @relation(fields: [productId], references: [id])
  productId  String?
  cart       Cart[]
  OrderItems OrderItems[]

  @@map("inventory")
}

model Cart {
  id String @id @default(uuid())

  quantity  Int
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart")
}

model Orders {
  id String @id @default(uuid())

  account   Account? @relation(fields: [accountId], references: [id])
  accountId String?

  paymentMethod String? @db.VarChar(100)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  OrderItems  OrderItems[]
  OrderStatus OrderStatus[]

  @@map("orders")
}

model OrderStatus {
  id String @id @default(uuid())

  account Account? @relation(fields: [adminId], references: [id])
  adminId String?

  status OrderStatuses? @default(PREPARING)

  orders  Orders? @relation(fields: [orderId], references: [id])
  orderId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItems {
  id String @id @default(uuid())

  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?

  orders  Orders? @relation(fields: [orderId], references: [id])
  orderId String

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}
