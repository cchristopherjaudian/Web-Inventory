// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountTypes {
  BUSINESS
  CUSTOMER
  ADMIN
  SUB_1
  SUB_2
}

enum AccountStatuses {
  ACTIVE
  INACTIVE
}

enum RouteStatuses {
  ACTIVE
  INACTIVE
}

enum StockIndicator {
  LOW
  NORMAL
  HIGH
}

enum OrderStatuses {
  PREPARING
  DISPATCHED
  DELIVERED
}

enum PaymentStatuses {
  PROCESSING
  PAID
  PENDING
  CANCELLED
}

enum PaymentMethods {
  COD
  GCASH
  BANK_TRANSFER
  PAY_LATER
}

model Account {
  id          String          @id @default(uuid())
  username    String          @db.VarChar(100)
  password    String          @db.VarChar(100)
  status      AccountStatuses @default(INACTIVE)
  accountType AccountTypes?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Profile     Profile?

  @@map("account")
}

model Profile {
  id           String   @id @default(uuid())
  firstname    String   @db.VarChar(100)
  lastname     String   @db.VarChar(100)
  emailAddress String   @db.VarChar(100)
  middlename   String?  @db.VarChar(100)
  businessName String?  @db.VarChar(100)
  address      String   @db.VarChar(100)
  photoUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  account     Account       @relation(fields: [accountId], references: [id])
  accountId   String        @unique
  Cart        Cart[]
  Orders      Orders[]
  OrderStatus OrderStatus[]
  Routes      Routes[]

  @@map("profile")
}

model Products {
  id String @id @default(uuid())

  name        String   @db.VarChar(100)
  code        String   @db.VarChar(100)
  size        String?  @db.VarChar(100)
  price       Decimal  @db.Decimal(9, 2)
  content     Decimal? @db.Decimal(9, 2)
  category    String   @db.VarChar(100)
  description String?
  photoUrl    String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  inventory  Inventory[]
  orderItems OrderItems[]
  Cart       Cart[]

  @@map("products")
}

model Inventory {
  id String @id @default(uuid())

  stock          Int
  stockIndicator StockIndicator @default(NORMAL)
  expiration     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Products? @relation(fields: [productId], references: [id])
  productId String?

  @@map("inventory")
}

model Cart {
  id String @id @default(uuid())

  quantity  Int
  groupNo   String?
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?

  saved Boolean? @default(false)

  products  Products? @relation(fields: [productId], references: [id])
  productId String?

  dateRequested DateTime?
  dateRequired  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("cart")
}

model Orders {
  id String @id @default(uuid())

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?

  paymentMethod   PaymentMethods  @default(COD)
  status          PaymentStatuses @default(PROCESSING)
  refNo           String?
  paymentUrl      String?
  deliveryUrl     String?
  paymentDeadline DateTime?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orderItems  OrderItems[]
  orderStatus OrderStatus[]

  @@map("orders")
}

model OrderStatus {
  id String @id @default(uuid())

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?

  status    OrderStatuses? @default(PREPARING)
  isCurrent Boolean        @default(false)

  orders  Orders? @relation(fields: [orderId], references: [id])
  orderId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_status")
}

model OrderItems {
  id String @id @default(uuid())

  products  Products? @relation(fields: [productId], references: [id])
  productId String?

  orders  Orders? @relation(fields: [orderId], references: [id])
  orderId String

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Routes {
  id String @id @default(uuid())

  route       String?
  date        String?
  time        String?
  description String?

  plateNumber String?

  status RouteStatuses @default(ACTIVE)

  profile Profile? @relation(fields: [adminId], references: [id])
  adminId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("routes")
}
